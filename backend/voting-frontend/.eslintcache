[{"H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\index.js":"1","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\App.js":"2","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\reportWebVitals.js":"3","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\actions\\store.js":"4","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\components\\Admin.js":"5","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\reducers\\index.js":"6","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\reducers\\admin.js":"7","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\actions\\admin.js":"8","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\actions\\api.js":"9","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\components\\AdminForm.js":"10","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\components\\useForm.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":390,"mtime":1610686170619,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":334,"mtime":1610684729394,"results":"16","hashOfConfig":"13"},{"size":3694,"mtime":1610746838028,"results":"17","hashOfConfig":"13"},{"size":135,"mtime":1610677929256,"results":"18","hashOfConfig":"13"},{"size":981,"mtime":1610745327438,"results":"19","hashOfConfig":"13"},{"size":1454,"mtime":1610852350314,"results":"20","hashOfConfig":"13"},{"size":462,"mtime":1610852147593,"results":"21","hashOfConfig":"13"},{"size":8238,"mtime":1610886380642,"results":"22","hashOfConfig":"13"},{"size":801,"mtime":1610745978374,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1e2jgvn",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},"H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\index.js",[],["54","55"],"H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\App.js",["56"],"import logo from './logo.svg';\nimport './App.css';\nimport { store } from \"./actions/store\";\nimport { Provider } from \"react-redux\";\nimport Admin from './components/Admin';\nimport { Container } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Container maxWidth=\"lg\">\n      <Admin />\n      </Container>\n      </Provider>\n  );\n}\n\nexport default App;\n","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\reportWebVitals.js",[],"H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\actions\\store.js",[],"H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\components\\Admin.js",["57"],"import { Button, ButtonGroup, Grid, Paper,Table, TableBody, TableCell, TableContainer, TableHead, TableRow, withStyles } from \"@material-ui/core\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/admin\";\r\nimport AdminForm from \"./AdminForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        \"& .MuiTableCell-head\": {\r\n            fontSize:\"1.25rem\"\r\n        }\r\n    },\r\n    paper : {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2)\r\n    }\r\n})\r\n//props.classes\r\n//const {classes, props} = props\r\n\r\nconst Admin = ({classes, ...props}) => {\r\n    const [currentId, setCurrentId] = useState(0)\r\n    //const {x, setX} = useState(0)\r\n    //setX(5)\r\n\r\n    useEffect(()=> {\r\n        props.fetchAllAdmin()\r\n    },[]) //componentAdmin\r\n\r\n    const onDelete = id =>{\r\n        if(window.confirm('Are you sure to delete this user?'))\r\n            props.deleteAdmin(id)\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper} elevation={3}>\r\n            <Grid container>\r\n                <Grid item xs= {6}>\r\n                    <AdminForm {...({currentId, setCurrentId})} />\r\n                </Grid>\r\n                <Grid item xs= {6}>\r\n                    <TableContainer>\r\n                        <Table>\r\n                            <TableHead className={classes.root}>\r\n                                <TableRow>\r\n                                    <TableCell>Name</TableCell>\r\n                                    <TableCell>Password</TableCell>\r\n                                    <TableCell>Rank</TableCell>\r\n                                    <TableCell></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    props.adminList.map((record, index)=>{\r\n                                        return (<TableRow key = {index} hover>\r\n                                            <TableCell>{record.name}</TableCell>\r\n                                            <TableCell>{record.password}</TableCell>\r\n                                            <TableCell>{record.rank}</TableCell>\r\n                                            <TableCell>\r\n                                                <ButtonGroup variant= \"text\">\r\n                                                    <Button><EditIcon color= \"primary\"\r\n                                                    onClick= {()=>{setCurrentId(record.id)}}\r\n                                                    /></Button>\r\n                                                    <Button><DeleteIcon color= \"secondary\"\r\n                                                    onClick={()=>onDelete(record.id)}\r\n                                                    /></Button>\r\n                                                </ButtonGroup>\r\n                                            </TableCell>\r\n                                        </TableRow>)\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n        adminList:state.admin.list\r\n    })\r\n\r\nconst mapActionToProps = {\r\n    fetchAllAdmin :  actions.fetchAll,\r\n    deleteAdmin : actions.Delete\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(Admin));","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\reducers\\index.js",[],"H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\reducers\\admin.js",["58"],"import { act } from \"react-dom/test-utils\";\r\nimport { ACTION_TYPES } from \"../actions/admin\";\r\n\r\nconst initialState = {\r\n    list:[]\r\n}\r\n\r\n\r\nexport const admin = (state= initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ACTION_TYPES.FETCH_ALL:\r\n            return {\r\n                ...state,\r\n                list : [...action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.CREATE:\r\n            return {\r\n                ...state,\r\n                list : [...state.list, action.payload]\r\n            }   \r\n        \r\n        case ACTION_TYPES.UPDATE:\r\n            return {\r\n                ...state,\r\n                list : state.list.map(x => x.id === action.payload.id? action.payload : x)\r\n            }   \r\n        \r\n        case ACTION_TYPES.DELETE:\r\n            return {\r\n                ...state,\r\n                list : state.list.filter(x => x.id !== action.payload)\r\n            }    \r\n    \r\n        default:\r\n            return state\r\n    }\r\n}",["59","60"],"H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\actions\\admin.js",[],"H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\actions\\api.js",["61"],"import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:5000/api/\"\r\n\r\nexport default {\r\n\r\n    admin(url = baseUrl + 'admin/'){\r\n        return {\r\n            fetchAll : () => axios.get(url),\r\n            fetchById : id => axios.get(url + id),\r\n            create : newRecord => axios.post(url, newRecord),\r\n            update : (id,updateRecord) => axios.put(url + id,updateRecord),\r\n            delete : id => axios.delete(url + id)\r\n        }\r\n    }\r\n}","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\components\\AdminForm.js",["62","63"],"import { Grid, TextField, withStyles, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport React,{useState, useEffect} from \"react\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/admin\";\r\n\r\nimport clsx from 'clsx';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n          margin: theme.spacing(1),\r\n          minWidth: 230,\r\n        },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n          minWidth: 230,\r\n    },\r\n    textField: {\r\n        margin: theme.spacing(1),\r\n        width: 230,\r\n      },\r\n    sMargin:{\r\n        margin: theme.spacing(1),\r\n    }\r\n})\r\n\r\nconst initialFieldValues = {\r\n    name : '',\r\n    password : '',\r\n    rank : '',\r\n    showPassword: false,\r\n}\r\n\r\nconst AdminForm = ({classes, ...props}) => {\r\n\r\n      //validate()\r\n      const validate = (fieldValues = values) =>{\r\n        let temp = { ...errors}\r\n        if ('name' in fieldValues)\r\n            temp.name = fieldValues.name ? \"\":\"Required\"\r\n        if ('password' in fieldValues)\r\n            temp.password = fieldValues.password ? \"\":\"Required\"\r\n        if ('rank' in fieldValues)\r\n            temp.rank = fieldValues.rank ? \"\":\"Required\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x===\"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFieldValues, validate, props.setCurrentId)\r\n\r\n    //material-ui select dropdown\r\n    const inputLabel = React.useRef(null);\r\n    const [labelWidth, setLableWidth] = React.useState(0);\r\n    React.useEffect(() => {\r\n        setLableWidth(inputLabel.current.offsetWidth);\r\n    }, []);\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...values, [prop]: event.target.value });\r\n      };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...values, showPassword: !values.showPassword });\r\n      };\r\n    \r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n      };\r\n\r\n    useEffect(()=>{\r\n        if (props.currentId !== 0){\r\n            setValues({\r\n                ...props.adminList.find(x=> x.id === props.currentId)\r\n            })\r\n            setErrors({})\r\n        }\r\n    }, [props.currentId])\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if(validate())\r\n        {   \r\n            const onSuccess = () => {\r\n                resetForm()\r\n                //addToast(\"Submitted successfully\", { appearance: 'success' })\r\n            }\r\n            if (props.currentId===0)\r\n            props.createAdmin(values, onSuccess)\r\n                //props.createAdmin(values,()=>{window.alert('Admin profile created.')})\r\n            else\r\n            props.updateAdmin(props.currentId, values, onSuccess)\r\n                //props.updateAdmin(props.currentId, values, ()=> {window.alert('Admin profile updated.')})\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <TextField \r\n                        name= \"name\"\r\n                        variant= \"outlined\"\r\n                        label= \"Name\"\r\n                        value = {values.name}\r\n                        onChange= {handleInputChange}\r\n                        {...(errors.name && {error:true, helperText:errors.name})}\r\n                    />\r\n                     {/* <TextField \r\n                        name= \"password\"\r\n                        variant= \"outlined\"\r\n                        label= \"Password\"\r\n                        type=\"password\"\r\n                        //autoComplete=\"current-password\"\r\n                        value = {values.password}\r\n                        onChange= {handleInputChange}\r\n                    /> */}\r\n                    <FormControl \r\n                    className={clsx(classes.margin, classes.textField)} \r\n                    variant=\"outlined\"\r\n                    {...(errors.password && {error:true})}\r\n                    >\r\n                        <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                        <OutlinedInput\r\n                            id=\"outlined-adornment-password\"\r\n                            type={values.showPassword ? 'text' : 'password'}\r\n                            value={values.password}\r\n                            onChange={handleChange('password')}\r\n                            endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            }\r\n                        labelWidth={70}\r\n                        />\r\n                        {errors.password && <FormHelperText>{errors.password}</FormHelperText>}\r\n                    </FormControl>\r\n                     {/* <TextField \r\n                        name= \"rank\"\r\n                        variant= \"outlined\"\r\n                        label= \"Rank\"\r\n                        value = {values.rank}\r\n                        onChange= {handleInputChange}\r\n                    /> */}\r\n                    <FormControl variant=\"outlined\" \r\n                    className={classes.formControl}\r\n                    {...(errors.rank && {error:true})}\r\n                    >\r\n                        <InputLabel ref={inputLabel}>Rank</InputLabel>\r\n                        <Select\r\n                            name= \"rank\"\r\n                            value = {values.rank}\r\n                            onChange= {handleInputChange}\r\n                            labelWidth={labelWidth}\r\n                        >\r\n                            <MenuItem value=\"\">Select Rank</MenuItem>  \r\n                            <MenuItem value=\"1\">Rank 1</MenuItem> \r\n                            <MenuItem value=\"2\">Rank 2</MenuItem> \r\n                            <MenuItem value=\"3\">Rank 3</MenuItem> \r\n                            <MenuItem value=\"4\">Rank 4</MenuItem> \r\n                        </Select>\r\n                        {errors.rank && <FormHelperText>{errors.rank}</FormHelperText>}\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <div>\r\n                        <Button\r\n                        variant = \"contained\"\r\n                        color=\"primary\"\r\n                        type=\"Submit\"\r\n                        className={classes.sMargin}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                        <Button\r\n                        variant = \"contained\"\r\n                        className={classes.sMargin}\r\n                        onClick= {resetForm}\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    adminList:state.admin.list\r\n})\r\n\r\nconst mapActionToProps = {\r\ncreateAdmin :  actions.create,\r\nupdateAdmin : actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(AdminForm));","H:\\Engineering\\6th Semester\\Academic\\Software Project\\Project\\backend\\voting-frontend\\src\\components\\useForm.js",["64","65"],"import React,{ useState, useEffect } from \"react\";\r\n\r\nconst useForm = (initialFieldValues, validate, setCurrentId) => {\r\n    const [values, setValues] = useState(initialFieldValues)\r\n    const [errors, setErrors] = useState({})\r\n    const handleInputChange = e => {\r\n        const {name, value} = e.target\r\n        const fieldValue = { [name]: value }\r\n        setValues({\r\n            ...values,\r\n            ...fieldValue\r\n        })\r\n        validate(fieldValue)\r\n    }\r\n\r\n    const resetForm = ()=>{\r\n        setValues({\r\n            ...initialFieldValues\r\n        })\r\n        setErrors({})\r\n        setCurrentId(0)\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    };\r\n}\r\n\r\nexport default useForm;",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":8,"nodeType":"72","messageId":"73","endLine":1,"endColumn":12},{"ruleId":"74","severity":1,"message":"75","line":30,"column":7,"nodeType":"76","endLine":30,"endColumn":9,"suggestions":"77"},{"ruleId":"70","severity":1,"message":"78","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":13},{"ruleId":"66","replacedBy":"79"},{"ruleId":"68","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":5,"column":1,"nodeType":"83","endLine":16,"endColumn":2},{"ruleId":"70","severity":1,"message":"84","line":2,"column":15,"nodeType":"72","messageId":"73","endLine":2,"endColumn":23},{"ruleId":"74","severity":1,"message":"85","line":94,"column":8,"nodeType":"76","endLine":94,"endColumn":25,"suggestions":"86"},{"ruleId":"70","severity":1,"message":"87","line":1,"column":8,"nodeType":"72","messageId":"73","endLine":1,"endColumn":13},{"ruleId":"70","severity":1,"message":"88","line":1,"column":26,"nodeType":"72","messageId":"73","endLine":1,"endColumn":35},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["91"],"'act' is defined but never used.",["89"],["90"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'props.adminList', 'setErrors', and 'setValues'. Either include them or remove the dependency array.",["92"],"'React' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [props]",{"range":"97","text":"98"},"Update the dependencies array to be: [props.adminList, props.currentId, setErrors, setValues]",{"range":"99","text":"100"},[909,911],"[props]",[2756,2773],"[props.adminList, props.currentId, setErrors, setValues]"]